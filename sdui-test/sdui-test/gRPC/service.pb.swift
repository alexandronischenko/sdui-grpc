// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: service.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// TODO
struct TodoList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var todos: [Todo] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct TodoID {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var todoID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Todo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var todoID: String = String()

  var title: String = String()

  var completed: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// VIEW
struct gRPCView {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var viewName: String {
    get {return _storage._viewName}
    set {_uniqueStorage()._viewName = newValue}
  }

  var type: String {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  var properties: Properties {
    get {return _storage._properties ?? Properties()}
    set {_uniqueStorage()._properties = newValue}
  }
  /// Returns true if `properties` has been explicitly set.
  var hasProperties: Bool {return _storage._properties != nil}
  /// Clears the value of `properties`. Subsequent reads from it will return its default value.
  mutating func clearProperties() {_uniqueStorage()._properties = nil}

  var values: Values {
    get {return _storage._values ?? Values()}
    set {_uniqueStorage()._values = newValue}
  }
  /// Returns true if `values` has been explicitly set.
  var hasValues: Bool {return _storage._values != nil}
  /// Clears the value of `values`. Subsequent reads from it will return its default value.
  mutating func clearValues() {_uniqueStorage()._values = nil}

  var operation: Operation {
    get {return _storage._operation ?? Operation()}
    set {_uniqueStorage()._operation = newValue}
  }
  /// Returns true if `operation` has been explicitly set.
  var hasOperation: Bool {return _storage._operation != nil}
  /// Clears the value of `operation`. Subsequent reads from it will return its default value.
  mutating func clearOperation() {_uniqueStorage()._operation = nil}

  var subviews: [gRPCView] {
    get {return _storage._subviews}
    set {_uniqueStorage()._subviews = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Empty {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Properties {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var font: String {
    get {return _font ?? String()}
    set {_font = newValue}
  }
  /// Returns true if `font` has been explicitly set.
  var hasFont: Bool {return self._font != nil}
  /// Clears the value of `font`. Subsequent reads from it will return its default value.
  mutating func clearFont() {self._font = nil}

  var fontWeight: String {
    get {return _fontWeight ?? String()}
    set {_fontWeight = newValue}
  }
  /// Returns true if `fontWeight` has been explicitly set.
  var hasFontWeight: Bool {return self._fontWeight != nil}
  /// Clears the value of `fontWeight`. Subsequent reads from it will return its default value.
  mutating func clearFontWeight() {self._fontWeight = nil}

  var foregroundColor: String {
    get {return _foregroundColor ?? String()}
    set {_foregroundColor = newValue}
  }
  /// Returns true if `foregroundColor` has been explicitly set.
  var hasForegroundColor: Bool {return self._foregroundColor != nil}
  /// Clears the value of `foregroundColor`. Subsequent reads from it will return its default value.
  mutating func clearForegroundColor() {self._foregroundColor = nil}

  var borderColor: String {
    get {return _borderColor ?? String()}
    set {_borderColor = newValue}
  }
  /// Returns true if `borderColor` has been explicitly set.
  var hasBorderColor: Bool {return self._borderColor != nil}
  /// Clears the value of `borderColor`. Subsequent reads from it will return its default value.
  mutating func clearBorderColor() {self._borderColor = nil}

  var borderWidth: Int32 {
    get {return _borderWidth ?? 0}
    set {_borderWidth = newValue}
  }
  /// Returns true if `borderWidth` has been explicitly set.
  var hasBorderWidth: Bool {return self._borderWidth != nil}
  /// Clears the value of `borderWidth`. Subsequent reads from it will return its default value.
  mutating func clearBorderWidth() {self._borderWidth = nil}

  var padding: Int32 {
    get {return _padding ?? 0}
    set {_padding = newValue}
  }
  /// Returns true if `padding` has been explicitly set.
  var hasPadding: Bool {return self._padding != nil}
  /// Clears the value of `padding`. Subsequent reads from it will return its default value.
  mutating func clearPadding() {self._padding = nil}

  var spacing: Int32 {
    get {return _spacing ?? 0}
    set {_spacing = newValue}
  }
  /// Returns true if `spacing` has been explicitly set.
  var hasSpacing: Bool {return self._spacing != nil}
  /// Clears the value of `spacing`. Subsequent reads from it will return its default value.
  mutating func clearSpacing() {self._spacing = nil}

  var width: Float {
    get {return _width ?? 0}
    set {_width = newValue}
  }
  /// Returns true if `width` has been explicitly set.
  var hasWidth: Bool {return self._width != nil}
  /// Clears the value of `width`. Subsequent reads from it will return its default value.
  mutating func clearWidth() {self._width = nil}

  var height: Float {
    get {return _height ?? 0}
    set {_height = newValue}
  }
  /// Returns true if `height` has been explicitly set.
  var hasHeight: Bool {return self._height != nil}
  /// Clears the value of `height`. Subsequent reads from it will return its default value.
  mutating func clearHeight() {self._height = nil}

  var minLength: Float {
    get {return _minLength ?? 0}
    set {_minLength = newValue}
  }
  /// Returns true if `minLength` has been explicitly set.
  var hasMinLength: Bool {return self._minLength != nil}
  /// Clears the value of `minLength`. Subsequent reads from it will return its default value.
  mutating func clearMinLength() {self._minLength = nil}

  /// leading, center, trailing
  var horizontalAlignment: String {
    get {return _horizontalAlignment ?? String()}
    set {_horizontalAlignment = newValue}
  }
  /// Returns true if `horizontalAlignment` has been explicitly set.
  var hasHorizontalAlignment: Bool {return self._horizontalAlignment != nil}
  /// Clears the value of `horizontalAlignment`. Subsequent reads from it will return its default value.
  mutating func clearHorizontalAlignment() {self._horizontalAlignment = nil}

  /// top, bottom, center, firstTextBaseline, lastTextBaseline
  var verticalAlignment: String {
    get {return _verticalAlignment ?? String()}
    set {_verticalAlignment = newValue}
  }
  /// Returns true if `verticalAlignment` has been explicitly set.
  var hasVerticalAlignment: Bool {return self._verticalAlignment != nil}
  /// Clears the value of `verticalAlignment`. Subsequent reads from it will return its default value.
  mutating func clearVerticalAlignment() {self._verticalAlignment = nil}

  /// vertical, horizontal (for ScrollView)
  var axis: String {
    get {return _axis ?? String()}
    set {_axis = newValue}
  }
  /// Returns true if `axis` has been explicitly set.
  var hasAxis: Bool {return self._axis != nil}
  /// Clears the value of `axis`. Subsequent reads from it will return its default value.
  mutating func clearAxis() {self._axis = nil}

  var showsIndicators: Bool {
    get {return _showsIndicators ?? false}
    set {_showsIndicators = newValue}
  }
  /// Returns true if `showsIndicators` has been explicitly set.
  var hasShowsIndicators: Bool {return self._showsIndicators != nil}
  /// Clears the value of `showsIndicators`. Subsequent reads from it will return its default value.
  mutating func clearShowsIndicators() {self._showsIndicators = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _font: String? = nil
  fileprivate var _fontWeight: String? = nil
  fileprivate var _foregroundColor: String? = nil
  fileprivate var _borderColor: String? = nil
  fileprivate var _borderWidth: Int32? = nil
  fileprivate var _padding: Int32? = nil
  fileprivate var _spacing: Int32? = nil
  fileprivate var _width: Float? = nil
  fileprivate var _height: Float? = nil
  fileprivate var _minLength: Float? = nil
  fileprivate var _horizontalAlignment: String? = nil
  fileprivate var _verticalAlignment: String? = nil
  fileprivate var _axis: String? = nil
  fileprivate var _showsIndicators: Bool? = nil
}

struct Values {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var text: String {
    get {return _text ?? String()}
    set {_text = newValue}
  }
  /// Returns true if `text` has been explicitly set.
  var hasText: Bool {return self._text != nil}
  /// Clears the value of `text`. Subsequent reads from it will return its default value.
  mutating func clearText() {self._text = nil}

  var imageURL: String {
    get {return _imageURL ?? String()}
    set {_imageURL = newValue}
  }
  /// Returns true if `imageURL` has been explicitly set.
  var hasImageURL: Bool {return self._imageURL != nil}
  /// Clears the value of `imageURL`. Subsequent reads from it will return its default value.
  mutating func clearImageURL() {self._imageURL = nil}

  var systemIconName: String {
    get {return _systemIconName ?? String()}
    set {_systemIconName = newValue}
  }
  /// Returns true if `systemIconName` has been explicitly set.
  var hasSystemIconName: Bool {return self._systemIconName != nil}
  /// Clears the value of `systemIconName`. Subsequent reads from it will return its default value.
  mutating func clearSystemIconName() {self._systemIconName = nil}

  var localImageName: String {
    get {return _localImageName ?? String()}
    set {_localImageName = newValue}
  }
  /// Returns true if `localImageName` has been explicitly set.
  var hasLocalImageName: Bool {return self._localImageName != nil}
  /// Clears the value of `localImageName`. Subsequent reads from it will return its default value.
  mutating func clearLocalImageName() {self._localImageName = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _text: String? = nil
  fileprivate var _imageURL: String? = nil
  fileprivate var _systemIconName: String? = nil
  fileprivate var _localImageName: String? = nil
}

struct Operation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var type: String {
    get {return _type ?? String()}
    set {_type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  var hasType: Bool {return self._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
  mutating func clearType() {self._type = nil}

  var viewName: String {
    get {return _viewName ?? String()}
    set {_viewName = newValue}
  }
  /// Returns true if `viewName` has been explicitly set.
  var hasViewName: Bool {return self._viewName != nil}
  /// Clears the value of `viewName`. Subsequent reads from it will return its default value.
  mutating func clearViewName() {self._viewName = nil}

  var universalLink: String {
    get {return _universalLink ?? String()}
    set {_universalLink = newValue}
  }
  /// Returns true if `universalLink` has been explicitly set.
  var hasUniversalLink: Bool {return self._universalLink != nil}
  /// Clears the value of `universalLink`. Subsequent reads from it will return its default value.
  mutating func clearUniversalLink() {self._universalLink = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _type: String? = nil
  fileprivate var _viewName: String? = nil
  fileprivate var _universalLink: String? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension TodoList: @unchecked Sendable {}
extension TodoID: @unchecked Sendable {}
extension Todo: @unchecked Sendable {}
extension gRPCView: @unchecked Sendable {}
extension Empty: @unchecked Sendable {}
extension Properties: @unchecked Sendable {}
extension Values: @unchecked Sendable {}
extension Operation: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension TodoList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "TodoList"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "todos"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.todos) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.todos.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.todos, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TodoList, rhs: TodoList) -> Bool {
    if lhs.todos != rhs.todos {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TodoID: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "TodoID"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "todoID"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.todoID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.todoID.isEmpty {
      try visitor.visitSingularStringField(value: self.todoID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TodoID, rhs: TodoID) -> Bool {
    if lhs.todoID != rhs.todoID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Todo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Todo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "todoID"),
    2: .same(proto: "title"),
    3: .same(proto: "completed"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.todoID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.completed) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.todoID.isEmpty {
      try visitor.visitSingularStringField(value: self.todoID, fieldNumber: 1)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 2)
    }
    if self.completed != false {
      try visitor.visitSingularBoolField(value: self.completed, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Todo, rhs: Todo) -> Bool {
    if lhs.todoID != rhs.todoID {return false}
    if lhs.title != rhs.title {return false}
    if lhs.completed != rhs.completed {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension gRPCView: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "gRPCView"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "viewName"),
    2: .same(proto: "type"),
    3: .same(proto: "properties"),
    4: .same(proto: "values"),
    5: .same(proto: "operation"),
    6: .same(proto: "subviews"),
  ]

  fileprivate class _StorageClass {
    var _viewName: String = String()
    var _type: String = String()
    var _properties: Properties? = nil
    var _values: Values? = nil
    var _operation: Operation? = nil
    var _subviews: [gRPCView] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _viewName = source._viewName
      _type = source._type
      _properties = source._properties
      _values = source._values
      _operation = source._operation
      _subviews = source._subviews
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._viewName) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._type) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._properties) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._values) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._operation) }()
        case 6: try { try decoder.decodeRepeatedMessageField(value: &_storage._subviews) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._viewName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._viewName, fieldNumber: 1)
      }
      if !_storage._type.isEmpty {
        try visitor.visitSingularStringField(value: _storage._type, fieldNumber: 2)
      }
      try { if let v = _storage._properties {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._values {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._operation {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
      if !_storage._subviews.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._subviews, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: gRPCView, rhs: gRPCView) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._viewName != rhs_storage._viewName {return false}
        if _storage._type != rhs_storage._type {return false}
        if _storage._properties != rhs_storage._properties {return false}
        if _storage._values != rhs_storage._values {return false}
        if _storage._operation != rhs_storage._operation {return false}
        if _storage._subviews != rhs_storage._subviews {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Empty: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Empty"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Empty, rhs: Empty) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Properties: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Properties"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "font"),
    2: .same(proto: "fontWeight"),
    3: .same(proto: "foregroundColor"),
    4: .same(proto: "borderColor"),
    5: .same(proto: "borderWidth"),
    6: .same(proto: "padding"),
    7: .same(proto: "spacing"),
    8: .same(proto: "width"),
    9: .same(proto: "height"),
    10: .same(proto: "minLength"),
    11: .same(proto: "horizontalAlignment"),
    12: .same(proto: "verticalAlignment"),
    13: .same(proto: "axis"),
    14: .same(proto: "showsIndicators"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._font) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._fontWeight) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._foregroundColor) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self._borderColor) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self._borderWidth) }()
      case 6: try { try decoder.decodeSingularInt32Field(value: &self._padding) }()
      case 7: try { try decoder.decodeSingularInt32Field(value: &self._spacing) }()
      case 8: try { try decoder.decodeSingularFloatField(value: &self._width) }()
      case 9: try { try decoder.decodeSingularFloatField(value: &self._height) }()
      case 10: try { try decoder.decodeSingularFloatField(value: &self._minLength) }()
      case 11: try { try decoder.decodeSingularStringField(value: &self._horizontalAlignment) }()
      case 12: try { try decoder.decodeSingularStringField(value: &self._verticalAlignment) }()
      case 13: try { try decoder.decodeSingularStringField(value: &self._axis) }()
      case 14: try { try decoder.decodeSingularBoolField(value: &self._showsIndicators) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._font {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._fontWeight {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._foregroundColor {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._borderColor {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._borderWidth {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._padding {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._spacing {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 7)
    } }()
    try { if let v = self._width {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 8)
    } }()
    try { if let v = self._height {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 9)
    } }()
    try { if let v = self._minLength {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 10)
    } }()
    try { if let v = self._horizontalAlignment {
      try visitor.visitSingularStringField(value: v, fieldNumber: 11)
    } }()
    try { if let v = self._verticalAlignment {
      try visitor.visitSingularStringField(value: v, fieldNumber: 12)
    } }()
    try { if let v = self._axis {
      try visitor.visitSingularStringField(value: v, fieldNumber: 13)
    } }()
    try { if let v = self._showsIndicators {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 14)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Properties, rhs: Properties) -> Bool {
    if lhs._font != rhs._font {return false}
    if lhs._fontWeight != rhs._fontWeight {return false}
    if lhs._foregroundColor != rhs._foregroundColor {return false}
    if lhs._borderColor != rhs._borderColor {return false}
    if lhs._borderWidth != rhs._borderWidth {return false}
    if lhs._padding != rhs._padding {return false}
    if lhs._spacing != rhs._spacing {return false}
    if lhs._width != rhs._width {return false}
    if lhs._height != rhs._height {return false}
    if lhs._minLength != rhs._minLength {return false}
    if lhs._horizontalAlignment != rhs._horizontalAlignment {return false}
    if lhs._verticalAlignment != rhs._verticalAlignment {return false}
    if lhs._axis != rhs._axis {return false}
    if lhs._showsIndicators != rhs._showsIndicators {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Values: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Values"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "text"),
    2: .same(proto: "imageUrl"),
    3: .same(proto: "systemIconName"),
    4: .same(proto: "localImageName"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._text) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._imageURL) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._systemIconName) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self._localImageName) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._text {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._imageURL {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._systemIconName {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._localImageName {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Values, rhs: Values) -> Bool {
    if lhs._text != rhs._text {return false}
    if lhs._imageURL != rhs._imageURL {return false}
    if lhs._systemIconName != rhs._systemIconName {return false}
    if lhs._localImageName != rhs._localImageName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Operation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Operation"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "viewName"),
    3: .same(proto: "universalLink"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._type) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._viewName) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._universalLink) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._type {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._viewName {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._universalLink {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Operation, rhs: Operation) -> Bool {
    if lhs._type != rhs._type {return false}
    if lhs._viewName != rhs._viewName {return false}
    if lhs._universalLink != rhs._universalLink {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
