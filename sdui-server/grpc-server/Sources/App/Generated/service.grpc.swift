//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: service.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `ViewServiceClient`, then call methods of this protocol to make API calls.
internal protocol ViewServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: ViewServiceClientInterceptorFactoryProtocol? { get }

  func staticView(
    _ request: Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<Empty, gRPCView>

  func listView(
    _ request: Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<Empty, gRPCView>

  func test(
    _ request: Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<Empty, Empty>

  func toDoListView(
    _ request: Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<Empty, gRPCView>

  func toDoView(
    _ request: TodoID,
    callOptions: CallOptions?
  ) -> UnaryCall<TodoID, gRPCView>

  func createToDo(
    _ request: Todo,
    callOptions: CallOptions?
  ) -> UnaryCall<Todo, gRPCView>

  func deleteTodo(
    _ request: TodoID,
    callOptions: CallOptions?
  ) -> UnaryCall<TodoID, gRPCView>
}

extension ViewServiceClientProtocol {
  internal var serviceName: String {
    return "ViewService"
  }

  /// Unary call to StaticView
  ///
  /// - Parameters:
  ///   - request: Request to send to StaticView.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func staticView(
    _ request: Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Empty, gRPCView> {
    return self.makeUnaryCall(
      path: ViewServiceClientMetadata.Methods.staticView.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStaticViewInterceptors() ?? []
    )
  }

  /// Unary call to ListView
  ///
  /// - Parameters:
  ///   - request: Request to send to ListView.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listView(
    _ request: Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Empty, gRPCView> {
    return self.makeUnaryCall(
      path: ViewServiceClientMetadata.Methods.listView.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListViewInterceptors() ?? []
    )
  }

  /// Unary call to Test
  ///
  /// - Parameters:
  ///   - request: Request to send to Test.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func test(
    _ request: Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Empty, Empty> {
    return self.makeUnaryCall(
      path: ViewServiceClientMetadata.Methods.test.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTestInterceptors() ?? []
    )
  }

  /// Unary call to ToDoListView
  ///
  /// - Parameters:
  ///   - request: Request to send to ToDoListView.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func toDoListView(
    _ request: Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Empty, gRPCView> {
    return self.makeUnaryCall(
      path: ViewServiceClientMetadata.Methods.toDoListView.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeToDoListViewInterceptors() ?? []
    )
  }

  /// Unary call to ToDoView
  ///
  /// - Parameters:
  ///   - request: Request to send to ToDoView.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func toDoView(
    _ request: TodoID,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<TodoID, gRPCView> {
    return self.makeUnaryCall(
      path: ViewServiceClientMetadata.Methods.toDoView.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeToDoViewInterceptors() ?? []
    )
  }

  /// Unary call to CreateToDo
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateToDo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createToDo(
    _ request: Todo,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Todo, gRPCView> {
    return self.makeUnaryCall(
      path: ViewServiceClientMetadata.Methods.createToDo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateToDoInterceptors() ?? []
    )
  }

  /// Unary call to DeleteTodo
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteTodo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deleteTodo(
    _ request: TodoID,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<TodoID, gRPCView> {
    return self.makeUnaryCall(
      path: ViewServiceClientMetadata.Methods.deleteTodo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteTodoInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension ViewServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "ViewServiceNIOClient")
internal final class ViewServiceClient: ViewServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: ViewServiceClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: ViewServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the ViewService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: ViewServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct ViewServiceNIOClient: ViewServiceClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: ViewServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the ViewService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: ViewServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol ViewServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: ViewServiceClientInterceptorFactoryProtocol? { get }

  func makeStaticViewCall(
    _ request: Empty,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Empty, gRPCView>

  func makeListViewCall(
    _ request: Empty,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Empty, gRPCView>

  func makeTestCall(
    _ request: Empty,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Empty, Empty>

  func makeToDoListViewCall(
    _ request: Empty,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Empty, gRPCView>

  func makeToDoViewCall(
    _ request: TodoID,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<TodoID, gRPCView>

  func makeCreateToDoCall(
    _ request: Todo,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Todo, gRPCView>

  func makeDeleteTodoCall(
    _ request: TodoID,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<TodoID, gRPCView>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension ViewServiceAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return ViewServiceClientMetadata.serviceDescriptor
  }

  internal var interceptors: ViewServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeStaticViewCall(
    _ request: Empty,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Empty, gRPCView> {
    return self.makeAsyncUnaryCall(
      path: ViewServiceClientMetadata.Methods.staticView.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStaticViewInterceptors() ?? []
    )
  }

  internal func makeListViewCall(
    _ request: Empty,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Empty, gRPCView> {
    return self.makeAsyncUnaryCall(
      path: ViewServiceClientMetadata.Methods.listView.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListViewInterceptors() ?? []
    )
  }

  internal func makeTestCall(
    _ request: Empty,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Empty, Empty> {
    return self.makeAsyncUnaryCall(
      path: ViewServiceClientMetadata.Methods.test.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTestInterceptors() ?? []
    )
  }

  internal func makeToDoListViewCall(
    _ request: Empty,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Empty, gRPCView> {
    return self.makeAsyncUnaryCall(
      path: ViewServiceClientMetadata.Methods.toDoListView.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeToDoListViewInterceptors() ?? []
    )
  }

  internal func makeToDoViewCall(
    _ request: TodoID,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<TodoID, gRPCView> {
    return self.makeAsyncUnaryCall(
      path: ViewServiceClientMetadata.Methods.toDoView.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeToDoViewInterceptors() ?? []
    )
  }

  internal func makeCreateToDoCall(
    _ request: Todo,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Todo, gRPCView> {
    return self.makeAsyncUnaryCall(
      path: ViewServiceClientMetadata.Methods.createToDo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateToDoInterceptors() ?? []
    )
  }

  internal func makeDeleteTodoCall(
    _ request: TodoID,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<TodoID, gRPCView> {
    return self.makeAsyncUnaryCall(
      path: ViewServiceClientMetadata.Methods.deleteTodo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteTodoInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension ViewServiceAsyncClientProtocol {
  internal func staticView(
    _ request: Empty,
    callOptions: CallOptions? = nil
  ) async throws -> gRPCView {
    return try await self.performAsyncUnaryCall(
      path: ViewServiceClientMetadata.Methods.staticView.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStaticViewInterceptors() ?? []
    )
  }

  internal func listView(
    _ request: Empty,
    callOptions: CallOptions? = nil
  ) async throws -> gRPCView {
    return try await self.performAsyncUnaryCall(
      path: ViewServiceClientMetadata.Methods.listView.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListViewInterceptors() ?? []
    )
  }

  internal func test(
    _ request: Empty,
    callOptions: CallOptions? = nil
  ) async throws -> Empty {
    return try await self.performAsyncUnaryCall(
      path: ViewServiceClientMetadata.Methods.test.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTestInterceptors() ?? []
    )
  }

  internal func toDoListView(
    _ request: Empty,
    callOptions: CallOptions? = nil
  ) async throws -> gRPCView {
    return try await self.performAsyncUnaryCall(
      path: ViewServiceClientMetadata.Methods.toDoListView.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeToDoListViewInterceptors() ?? []
    )
  }

  internal func toDoView(
    _ request: TodoID,
    callOptions: CallOptions? = nil
  ) async throws -> gRPCView {
    return try await self.performAsyncUnaryCall(
      path: ViewServiceClientMetadata.Methods.toDoView.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeToDoViewInterceptors() ?? []
    )
  }

  internal func createToDo(
    _ request: Todo,
    callOptions: CallOptions? = nil
  ) async throws -> gRPCView {
    return try await self.performAsyncUnaryCall(
      path: ViewServiceClientMetadata.Methods.createToDo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateToDoInterceptors() ?? []
    )
  }

  internal func deleteTodo(
    _ request: TodoID,
    callOptions: CallOptions? = nil
  ) async throws -> gRPCView {
    return try await self.performAsyncUnaryCall(
      path: ViewServiceClientMetadata.Methods.deleteTodo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteTodoInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct ViewServiceAsyncClient: ViewServiceAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: ViewServiceClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: ViewServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol ViewServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'staticView'.
  func makeStaticViewInterceptors() -> [ClientInterceptor<Empty, gRPCView>]

  /// - Returns: Interceptors to use when invoking 'listView'.
  func makeListViewInterceptors() -> [ClientInterceptor<Empty, gRPCView>]

  /// - Returns: Interceptors to use when invoking 'test'.
  func makeTestInterceptors() -> [ClientInterceptor<Empty, Empty>]

  /// - Returns: Interceptors to use when invoking 'toDoListView'.
  func makeToDoListViewInterceptors() -> [ClientInterceptor<Empty, gRPCView>]

  /// - Returns: Interceptors to use when invoking 'toDoView'.
  func makeToDoViewInterceptors() -> [ClientInterceptor<TodoID, gRPCView>]

  /// - Returns: Interceptors to use when invoking 'createToDo'.
  func makeCreateToDoInterceptors() -> [ClientInterceptor<Todo, gRPCView>]

  /// - Returns: Interceptors to use when invoking 'deleteTodo'.
  func makeDeleteTodoInterceptors() -> [ClientInterceptor<TodoID, gRPCView>]
}

internal enum ViewServiceClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "ViewService",
    fullName: "ViewService",
    methods: [
      ViewServiceClientMetadata.Methods.staticView,
      ViewServiceClientMetadata.Methods.listView,
      ViewServiceClientMetadata.Methods.test,
      ViewServiceClientMetadata.Methods.toDoListView,
      ViewServiceClientMetadata.Methods.toDoView,
      ViewServiceClientMetadata.Methods.createToDo,
      ViewServiceClientMetadata.Methods.deleteTodo,
    ]
  )

  internal enum Methods {
    internal static let staticView = GRPCMethodDescriptor(
      name: "StaticView",
      path: "/ViewService/StaticView",
      type: GRPCCallType.unary
    )

    internal static let listView = GRPCMethodDescriptor(
      name: "ListView",
      path: "/ViewService/ListView",
      type: GRPCCallType.unary
    )

    internal static let test = GRPCMethodDescriptor(
      name: "Test",
      path: "/ViewService/Test",
      type: GRPCCallType.unary
    )

    internal static let toDoListView = GRPCMethodDescriptor(
      name: "ToDoListView",
      path: "/ViewService/ToDoListView",
      type: GRPCCallType.unary
    )

    internal static let toDoView = GRPCMethodDescriptor(
      name: "ToDoView",
      path: "/ViewService/ToDoView",
      type: GRPCCallType.unary
    )

    internal static let createToDo = GRPCMethodDescriptor(
      name: "CreateToDo",
      path: "/ViewService/CreateToDo",
      type: GRPCCallType.unary
    )

    internal static let deleteTodo = GRPCMethodDescriptor(
      name: "DeleteTodo",
      path: "/ViewService/DeleteTodo",
      type: GRPCCallType.unary
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol ViewServiceProvider: CallHandlerProvider {
  var interceptors: ViewServiceServerInterceptorFactoryProtocol? { get }

  func staticView(request: Empty, context: StatusOnlyCallContext) -> EventLoopFuture<gRPCView>

  func listView(request: Empty, context: StatusOnlyCallContext) -> EventLoopFuture<gRPCView>

  func test(request: Empty, context: StatusOnlyCallContext) -> EventLoopFuture<Empty>

  func toDoListView(request: Empty, context: StatusOnlyCallContext) -> EventLoopFuture<gRPCView>

  func toDoView(request: TodoID, context: StatusOnlyCallContext) -> EventLoopFuture<gRPCView>

  func createToDo(request: Todo, context: StatusOnlyCallContext) -> EventLoopFuture<gRPCView>

  func deleteTodo(request: TodoID, context: StatusOnlyCallContext) -> EventLoopFuture<gRPCView>
}

extension ViewServiceProvider {
  internal var serviceName: Substring {
    return ViewServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "StaticView":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Empty>(),
        responseSerializer: ProtobufSerializer<gRPCView>(),
        interceptors: self.interceptors?.makeStaticViewInterceptors() ?? [],
        userFunction: self.staticView(request:context:)
      )

    case "ListView":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Empty>(),
        responseSerializer: ProtobufSerializer<gRPCView>(),
        interceptors: self.interceptors?.makeListViewInterceptors() ?? [],
        userFunction: self.listView(request:context:)
      )

    case "Test":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Empty>(),
        responseSerializer: ProtobufSerializer<Empty>(),
        interceptors: self.interceptors?.makeTestInterceptors() ?? [],
        userFunction: self.test(request:context:)
      )

    case "ToDoListView":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Empty>(),
        responseSerializer: ProtobufSerializer<gRPCView>(),
        interceptors: self.interceptors?.makeToDoListViewInterceptors() ?? [],
        userFunction: self.toDoListView(request:context:)
      )

    case "ToDoView":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<TodoID>(),
        responseSerializer: ProtobufSerializer<gRPCView>(),
        interceptors: self.interceptors?.makeToDoViewInterceptors() ?? [],
        userFunction: self.toDoView(request:context:)
      )

    case "CreateToDo":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Todo>(),
        responseSerializer: ProtobufSerializer<gRPCView>(),
        interceptors: self.interceptors?.makeCreateToDoInterceptors() ?? [],
        userFunction: self.createToDo(request:context:)
      )

    case "DeleteTodo":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<TodoID>(),
        responseSerializer: ProtobufSerializer<gRPCView>(),
        interceptors: self.interceptors?.makeDeleteTodoInterceptors() ?? [],
        userFunction: self.deleteTodo(request:context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol ViewServiceAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: ViewServiceServerInterceptorFactoryProtocol? { get }

  func staticView(
    request: Empty,
    context: GRPCAsyncServerCallContext
  ) async throws -> gRPCView

  func listView(
    request: Empty,
    context: GRPCAsyncServerCallContext
  ) async throws -> gRPCView

  func test(
    request: Empty,
    context: GRPCAsyncServerCallContext
  ) async throws -> Empty

  func toDoListView(
    request: Empty,
    context: GRPCAsyncServerCallContext
  ) async throws -> gRPCView

  func toDoView(
    request: TodoID,
    context: GRPCAsyncServerCallContext
  ) async throws -> gRPCView

  func createToDo(
    request: Todo,
    context: GRPCAsyncServerCallContext
  ) async throws -> gRPCView

  func deleteTodo(
    request: TodoID,
    context: GRPCAsyncServerCallContext
  ) async throws -> gRPCView
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension ViewServiceAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return ViewServiceServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return ViewServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: ViewServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "StaticView":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Empty>(),
        responseSerializer: ProtobufSerializer<gRPCView>(),
        interceptors: self.interceptors?.makeStaticViewInterceptors() ?? [],
        wrapping: { try await self.staticView(request: $0, context: $1) }
      )

    case "ListView":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Empty>(),
        responseSerializer: ProtobufSerializer<gRPCView>(),
        interceptors: self.interceptors?.makeListViewInterceptors() ?? [],
        wrapping: { try await self.listView(request: $0, context: $1) }
      )

    case "Test":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Empty>(),
        responseSerializer: ProtobufSerializer<Empty>(),
        interceptors: self.interceptors?.makeTestInterceptors() ?? [],
        wrapping: { try await self.test(request: $0, context: $1) }
      )

    case "ToDoListView":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Empty>(),
        responseSerializer: ProtobufSerializer<gRPCView>(),
        interceptors: self.interceptors?.makeToDoListViewInterceptors() ?? [],
        wrapping: { try await self.toDoListView(request: $0, context: $1) }
      )

    case "ToDoView":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<TodoID>(),
        responseSerializer: ProtobufSerializer<gRPCView>(),
        interceptors: self.interceptors?.makeToDoViewInterceptors() ?? [],
        wrapping: { try await self.toDoView(request: $0, context: $1) }
      )

    case "CreateToDo":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Todo>(),
        responseSerializer: ProtobufSerializer<gRPCView>(),
        interceptors: self.interceptors?.makeCreateToDoInterceptors() ?? [],
        wrapping: { try await self.createToDo(request: $0, context: $1) }
      )

    case "DeleteTodo":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<TodoID>(),
        responseSerializer: ProtobufSerializer<gRPCView>(),
        interceptors: self.interceptors?.makeDeleteTodoInterceptors() ?? [],
        wrapping: { try await self.deleteTodo(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

internal protocol ViewServiceServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'staticView'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeStaticViewInterceptors() -> [ServerInterceptor<Empty, gRPCView>]

  /// - Returns: Interceptors to use when handling 'listView'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListViewInterceptors() -> [ServerInterceptor<Empty, gRPCView>]

  /// - Returns: Interceptors to use when handling 'test'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTestInterceptors() -> [ServerInterceptor<Empty, Empty>]

  /// - Returns: Interceptors to use when handling 'toDoListView'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeToDoListViewInterceptors() -> [ServerInterceptor<Empty, gRPCView>]

  /// - Returns: Interceptors to use when handling 'toDoView'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeToDoViewInterceptors() -> [ServerInterceptor<TodoID, gRPCView>]

  /// - Returns: Interceptors to use when handling 'createToDo'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateToDoInterceptors() -> [ServerInterceptor<Todo, gRPCView>]

  /// - Returns: Interceptors to use when handling 'deleteTodo'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDeleteTodoInterceptors() -> [ServerInterceptor<TodoID, gRPCView>]
}

internal enum ViewServiceServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "ViewService",
    fullName: "ViewService",
    methods: [
      ViewServiceServerMetadata.Methods.staticView,
      ViewServiceServerMetadata.Methods.listView,
      ViewServiceServerMetadata.Methods.test,
      ViewServiceServerMetadata.Methods.toDoListView,
      ViewServiceServerMetadata.Methods.toDoView,
      ViewServiceServerMetadata.Methods.createToDo,
      ViewServiceServerMetadata.Methods.deleteTodo,
    ]
  )

  internal enum Methods {
    internal static let staticView = GRPCMethodDescriptor(
      name: "StaticView",
      path: "/ViewService/StaticView",
      type: GRPCCallType.unary
    )

    internal static let listView = GRPCMethodDescriptor(
      name: "ListView",
      path: "/ViewService/ListView",
      type: GRPCCallType.unary
    )

    internal static let test = GRPCMethodDescriptor(
      name: "Test",
      path: "/ViewService/Test",
      type: GRPCCallType.unary
    )

    internal static let toDoListView = GRPCMethodDescriptor(
      name: "ToDoListView",
      path: "/ViewService/ToDoListView",
      type: GRPCCallType.unary
    )

    internal static let toDoView = GRPCMethodDescriptor(
      name: "ToDoView",
      path: "/ViewService/ToDoView",
      type: GRPCCallType.unary
    )

    internal static let createToDo = GRPCMethodDescriptor(
      name: "CreateToDo",
      path: "/ViewService/CreateToDo",
      type: GRPCCallType.unary
    )

    internal static let deleteTodo = GRPCMethodDescriptor(
      name: "DeleteTodo",
      path: "/ViewService/DeleteTodo",
      type: GRPCCallType.unary
    )
  }
}
